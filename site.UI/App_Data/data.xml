<?xml version="1.0" encoding="utf-8"?>
<data>
  <articles>
    <article id="4">
      <title>Photo gallery</title>
      <technos>ASP.NET Core;DI;Angular8</technos>
      <shortdescription>
        Register, log in and upload photos to your private library, sharing and commenting photos is coming soon...
      </shortdescription>
      <longdescription>
&amp;lt;div class="row" style="padding: 0 90px; margin: 40px auto 40px auto;"&amp;gt;
&amp;lt;h3&amp;gt;&amp;lt;em&amp;gt;I developed this application to write RESTful APIs using ASP .Net Core and to consume them by a front-end project developed with Angular8. The purpose of the development of this application is purely academic.&amp;lt;/em&amp;gt;&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;In this application I wanted to develop two major functionalities:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;Authentication (and registration)&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;Uploading photos (and deleting them)&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;I divided the application into two solutions:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span&amp;gt;Back-End&amp;lt;/span&amp;gt;: developed with &amp;lt;strong&amp;gt;AspDotNetCore&amp;lt;/strong&amp;gt;,&amp;amp;nbsp;&amp;lt;strong&amp;gt;Entity Framework Core&amp;lt;/strong&amp;gt;&amp;amp;nbsp;and&amp;amp;nbsp;&amp;lt;strong&amp;gt;SQL Server&amp;lt;/strong&amp;gt;. It exposes different&amp;amp;nbsp;&amp;lt;strong&amp;gt;WebAPIs&amp;lt;/strong&amp;gt; like registering to the application, logging-in and uploading photos.&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span&amp;gt;Front-End&amp;lt;/span&amp;gt;: developed with&amp;lt;strong&amp;gt;&amp;amp;nbsp;Angular 8&amp;lt;/strong&amp;gt;&amp;amp;nbsp;and&amp;amp;nbsp;&amp;lt;strong&amp;gt;Bootstrap 4&amp;lt;/strong&amp;gt;. A simple web interface to navigate to different functionalities by consuming the WebAPIs.&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;In this article, I will focus only on the architecture of the Back-End solution. However, I will not go through the technical details of authentication mechanism and uploading photos.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;hr /&amp;gt;
&amp;lt;h2&amp;gt;Architecture&amp;lt;/h2&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class="row" style="padding: 0 90px; margin: 40px auto 40px auto;"&amp;gt;
&amp;lt;p&amp;gt;I followed the SOLID principles to have a decoupled architecture. To do so, I used Dependency Injection which is much more simplified in .Net Core for being built-in the framework instead of grabbing it from a third party provider like in previous versions.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;My solution is made of three major projects, each one of them is a separated layer.&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;em&amp;gt;WebAPI layer&amp;lt;/em&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;em&amp;gt;Domain layer&amp;lt;/em&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;em&amp;gt;Data layer&amp;lt;/em&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;div class="figure"&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src="/images/PlaygroundGallery2.png" alt="" /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;For each HTTP request, the ApiController receives it and calls a specific method of&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;FrontManager&amp;lt;/span&amp;gt;, located in the layer below, which includes all the operations we need for our application.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The &amp;lt;em&amp;gt;Domain layer&amp;lt;/em&amp;gt; is the connecting point between the &amp;lt;em&amp;gt;WebAPI layer&amp;lt;/em&amp;gt; and the &amp;lt;em&amp;gt;Data layer&amp;lt;/em&amp;gt;. It creates a level of abstraction between both of them.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;If needed, &amp;lt;span class="code-var"&amp;gt;FrontManager&amp;lt;/span&amp;gt; maps DTOs (models used by the API user) to entities (models used by &amp;lt;em&amp;gt;Data layer&amp;lt;/em&amp;gt;, more precisely by Entity Framework). In case of an uploading photo operation, the photo will be uploaded to Cloudinary.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Then the request is sent to the &amp;lt;em&amp;gt;Data layer&amp;lt;/em&amp;gt; which is connected to the data source. In my case I use SQL Server, and Entity Framework Core as an ORM.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The repository implements all CRUD operations needed to interact with the data base.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Each layer is connected to the next one by Dependency Injection.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I&amp;amp;rsquo;m going to go through the different projects/layers by order of importance.&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class="row" style="padding: 0 90px; margin: 40px auto 40px auto;"&amp;gt;
&amp;lt;h2&amp;gt;Domain Project&amp;lt;/h2&amp;gt;
&amp;lt;h3&amp;gt;Entities and DTOs&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;First of all I created the models that we need for the application keeping in mind they represent the tables in my SQL data base.&amp;lt;/p&amp;gt;
&amp;lt;div class="figure"&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;img src="/images/Entities.png" alt="" /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;Then I define the DTO models that will be used by the API. For example in &amp;lt;span class="code-var"&amp;gt;Member&amp;lt;/span&amp;gt; entity I have a &amp;lt;span class="code-var"&amp;gt;PasswordHash&amp;lt;/span&amp;gt; property, which is an array of bytes. Obviously the end user won&amp;amp;rsquo;t need this information. So I create a &amp;lt;span class="code-var"&amp;gt;MemberDTO&amp;lt;/span&amp;gt; where I expose only relevant information.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;div class="code"&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;public&amp;amp;nbsp;class&amp;amp;nbsp;MemberDto&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;{&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;public&amp;amp;nbsp;int&amp;amp;nbsp;Id&amp;amp;nbsp;{&amp;amp;nbsp;get;&amp;amp;nbsp;set;&amp;amp;nbsp;}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;public&amp;amp;nbsp;string&amp;amp;nbsp;LoginName&amp;amp;nbsp;{&amp;amp;nbsp;get;&amp;amp;nbsp;set;&amp;amp;nbsp;}&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;public&amp;amp;nbsp;string&amp;amp;nbsp;EmailAddress&amp;amp;nbsp;{&amp;amp;nbsp;get;&amp;amp;nbsp;set;&amp;amp;nbsp;}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;Generic Repository Interface&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;span class="code-var"&amp;gt;IRepository&amp;amp;lt;TEntity&amp;amp;gt;&amp;lt;/span&amp;gt; interface is the contract of all CRUD operations that will be performed against any kind of data source and for any type of entity. Its implementation resides in the &amp;lt;em&amp;gt;Data layer&amp;lt;/em&amp;gt;.&amp;amp;nbsp;This ensures decoupling both layers and lets us use multiple data sources.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;div class="code"&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;public&amp;amp;nbsp;interface&amp;amp;nbsp;IRepository&amp;amp;lt;TEntity&amp;amp;gt;&amp;amp;nbsp;where&amp;amp;nbsp;TEntity&amp;amp;nbsp;:&amp;amp;nbsp;Entity&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;{&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Task&amp;amp;lt;bool&amp;amp;gt;&amp;amp;nbsp;Add(TEntity&amp;amp;nbsp;entry);&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Task&amp;amp;lt;bool&amp;amp;gt;&amp;amp;nbsp;Update(TEntity&amp;amp;nbsp;entity);&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Task&amp;amp;lt;IEnumerable&amp;amp;lt;TEntity&amp;amp;gt;&amp;amp;gt;&amp;amp;nbsp;GetAll();&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Task&amp;amp;lt;TEntity&amp;amp;gt;&amp;amp;nbsp;Get(int&amp;amp;nbsp;id);&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;void&amp;amp;nbsp;Remove(TEntity&amp;amp;nbsp;entry);&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Task&amp;amp;lt;IEnumerable&amp;amp;lt;TEntity&amp;amp;gt;&amp;amp;gt;&amp;amp;nbsp;Find(Expression&amp;amp;lt;Func&amp;amp;lt;TEntity,&amp;amp;nbsp;bool&amp;amp;gt;&amp;amp;gt;&amp;amp;nbsp;predicate);&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Task&amp;amp;lt;IEnumerable&amp;amp;lt;TEntity&amp;amp;gt;&amp;amp;gt;&amp;amp;nbsp;Find(&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Expression&amp;amp;lt;Func&amp;amp;lt;TEntity,&amp;amp;nbsp;bool&amp;amp;gt;&amp;amp;gt;&amp;amp;nbsp;filter&amp;amp;nbsp;=&amp;amp;nbsp;null,&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Func&amp;amp;lt;IQueryable&amp;amp;lt;TEntity&amp;amp;gt;,&amp;amp;nbsp;IOrderedQueryable&amp;amp;lt;TEntity&amp;amp;gt;&amp;amp;gt;&amp;amp;nbsp;orderBy&amp;amp;nbsp;=&amp;amp;nbsp;null,&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;params&amp;amp;nbsp;Expression&amp;amp;lt;Func&amp;amp;lt;TEntity,&amp;amp;nbsp;object&amp;amp;gt;&amp;amp;gt;[]&amp;amp;nbsp;includeProperties);&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Task&amp;amp;lt;TEntity&amp;amp;gt;&amp;amp;nbsp;SingleOrDefault(Expression&amp;amp;lt;Func&amp;amp;lt;TEntity,&amp;amp;nbsp;bool&amp;amp;gt;&amp;amp;gt;&amp;amp;nbsp;predicate,&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;params&amp;amp;nbsp;Expression&amp;amp;lt;Func&amp;amp;lt;TEntity,&amp;amp;nbsp;object&amp;amp;gt;&amp;amp;gt;[]&amp;amp;nbsp;includeProperties);&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Task&amp;amp;lt;bool&amp;amp;gt;&amp;amp;nbsp;AnyAsync(Expression&amp;amp;lt;Func&amp;amp;lt;TEntity,&amp;amp;nbsp;bool&amp;amp;gt;&amp;amp;gt;&amp;amp;nbsp;predicate);&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;If I need a specific query for one of the entities, for example&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;GetMemberByEmailAddress&amp;lt;/span&amp;gt;&amp;amp;nbsp;from &amp;lt;span class="code-var"&amp;gt;Member&amp;lt;/span&amp;gt; entity, I cannot add it to the generic&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;IRepository&amp;amp;lt;TEntity&amp;amp;gt;&amp;lt;/span&amp;gt;&amp;amp;nbsp;interface. Instead, I add specific interfaces&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;IMemberRepository&amp;lt;/span&amp;gt;&amp;amp;nbsp;and&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;IPhotoRepository&amp;lt;/span&amp;gt;&amp;amp;nbsp;inheriting respectively from&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;IRepository&amp;amp;lt;Member&amp;amp;gt;&amp;lt;/span&amp;gt;&amp;amp;nbsp;and&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;IRepository&amp;amp;lt;Photo&amp;amp;gt;&amp;lt;/span&amp;gt;&amp;amp;nbsp;and define their specific contracts.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;div class="code"&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;public&amp;amp;nbsp;interface&amp;amp;nbsp;IMemberRepository:&amp;amp;nbsp;IRepository&amp;amp;lt;Member&amp;amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;{&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Task&amp;amp;lt;Member&amp;amp;gt;&amp;amp;nbsp;GetMemberByEmailAddress(string&amp;amp;nbsp;emailAddress);&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;Unit Of Work&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;All available actions to the &amp;lt;em&amp;gt;WebAPI layer&amp;lt;/em&amp;gt; are defined in&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;IFrontManager&amp;lt;/span&amp;gt;&amp;amp;nbsp;interface. It is known as Unit of Work.&amp;amp;nbsp;&amp;amp;nbsp;Its purpose is to perform business logic away from both &amp;lt;em&amp;gt;WebAPI layer&amp;lt;/em&amp;gt; and &amp;lt;em&amp;gt;Data layer&amp;lt;/em&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;div class="code"&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;public&amp;amp;nbsp;interface&amp;amp;nbsp;IFrontManager&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;{&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Task&amp;amp;lt;PhotoForReturnDto&amp;amp;gt;&amp;amp;nbsp;UploadPhoto(PhotoForCreationDto&amp;amp;nbsp;photoForCreationDto);&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Task&amp;amp;lt;PhotoForReturnDto&amp;amp;gt;&amp;amp;nbsp;GetPhoto(int&amp;amp;nbsp;id);&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Task&amp;amp;lt;IEnumerable&amp;amp;lt;PhotoForReturnDto&amp;amp;gt;&amp;amp;gt;&amp;amp;nbsp;GetPhotosByMemberId(int&amp;amp;nbsp;id);&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Task&amp;amp;lt;string&amp;amp;gt;&amp;amp;nbsp;Login(MemberToLoginDto&amp;amp;nbsp;memberToLoginDto);&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Task&amp;amp;lt;MemberDto&amp;amp;gt;&amp;amp;nbsp;Register(MemberToLoginDto&amp;amp;nbsp;memberToLoginDto);&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;Task&amp;amp;lt;MemberDto&amp;amp;gt;&amp;amp;nbsp;GetMember(int&amp;amp;nbsp;id);&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The implementation of&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;IFrontManager&amp;lt;/span&amp;gt;&amp;amp;nbsp;is done by&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;FrontManager&amp;lt;/span&amp;gt;&amp;amp;nbsp;class. Since the repository interface is the connecting point between my &amp;lt;em&amp;gt;Domain layer&amp;lt;/em&amp;gt; and my &amp;lt;em&amp;gt;Data layer&amp;lt;/em&amp;gt;,&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;FrontManager&amp;lt;/span&amp;gt;&amp;amp;nbsp;needs instances of an implementation of both repositories to send queries to the data source.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;div class="figure"&amp;gt;&amp;lt;img src="/images/RepositoriyImpl.png" alt="" /&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;span&amp;gt;&amp;amp;nbsp;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;Exceptions with significant information about errors occurring during the process&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;For each method, if an action cannot be performed due to errors, custom exceptions are thrown to give detailed information why the action couldn&amp;amp;rsquo;t be completed. They will be caught in &amp;lt;em&amp;gt;WebAPI layer&amp;lt;/em&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;div class="code"&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;public&amp;amp;nbsp;async&amp;amp;nbsp;Task&amp;amp;lt;PhotoForReturnDto&amp;amp;gt;&amp;amp;nbsp;UploadPhoto(PhotoForCreationDto&amp;amp;nbsp;photoForCreationDto)&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;{&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;if&amp;amp;nbsp;(photoForCreationDto.File&amp;amp;nbsp;==&amp;amp;nbsp;null&amp;amp;nbsp;||&amp;amp;nbsp;photoForCreationDto.File.Length&amp;amp;nbsp;&amp;amp;lt;&amp;amp;nbsp;1)&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;{&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;throw&amp;amp;nbsp;new&amp;amp;nbsp;PhotoUploadFileEmptyException();&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;var&amp;amp;nbsp;uploadSucceeded&amp;amp;nbsp;=&amp;amp;nbsp;UploadPhotoToPhotoLibrary(photoForCreationDto);&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;if&amp;amp;nbsp;(uploadSucceeded == false)&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;{&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;throw&amp;amp;nbsp;new&amp;amp;nbsp;PhotoUploadToLibraryException();&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class="row" style="padding: 0 90px; margin: 40px auto 40px auto;"&amp;gt;
&amp;lt;h2&amp;gt;Data Project&amp;lt;/h2&amp;gt;
&amp;lt;h3&amp;gt;Entity Framework Core&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;In the &amp;lt;em&amp;gt;Data layer&amp;lt;/em&amp;gt; I use Entity Framework Core 2.0 to implement&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;IRepository&amp;lt;/span&amp;gt;&amp;amp;nbsp;interface defined in the Domain project.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;To perform the Entity Framework code-first migration, I create&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;GalleryContext&amp;lt;/span&amp;gt;&amp;amp;nbsp;class that inherits from&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;DbContext&amp;lt;/span&amp;gt;. I also create&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;IGalleryContext&amp;lt;/span&amp;gt;&amp;amp;nbsp;interface which is implemented by&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;GalleryContext&amp;lt;/span&amp;gt;&amp;amp;nbsp;to keep things extensible if we ever want to expose new functionalities:&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;div class="figure"&amp;gt;&amp;lt;img src="/images/GalleryContext.png" alt="" /&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;Repository Implementation&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The repository require a&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;DbContext&amp;lt;/span&amp;gt;&amp;amp;nbsp;to access to the data base. I define a property&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;MainDbContext&amp;lt;/span&amp;gt;&amp;amp;nbsp;of type&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;IGalleryContext&amp;lt;/span&amp;gt;&amp;amp;nbsp;and&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;EntityDbSet&amp;lt;/span&amp;gt;&amp;amp;nbsp;of type&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;DbSet&amp;amp;lt;TEntity&amp;amp;gt;&amp;lt;/span&amp;gt;&amp;amp;nbsp;(collection of entities representing the table in the data base). By constructor injection,&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;MainDbContext&amp;lt;/span&amp;gt;&amp;amp;nbsp;will be assigned with an instance of&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;GalleryContext&amp;lt;/span&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;div class="code"&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;public&amp;amp;nbsp;class&amp;amp;nbsp;Repository&amp;amp;lt;TEntity&amp;amp;gt;&amp;amp;nbsp;:&amp;amp;nbsp;IRepository&amp;amp;lt;TEntity&amp;amp;gt;&amp;amp;nbsp;where&amp;amp;nbsp;TEntity&amp;amp;nbsp;:&amp;amp;nbsp;Entity&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;{&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;protected&amp;amp;nbsp;readonly&amp;amp;nbsp;IGalleryContext&amp;amp;nbsp;MainDbContext;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;protected&amp;amp;nbsp;readonly&amp;amp;nbsp;DbSet&amp;amp;lt;TEntity&amp;amp;gt;&amp;amp;nbsp;EntityDbSet;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;public&amp;amp;nbsp;Repository(IGalleryContext&amp;amp;nbsp;dbContext)&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;{&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;MainDbContext&amp;amp;nbsp;=&amp;amp;nbsp;dbContext;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;EntityDbSet =&amp;amp;nbsp;dbContext.Set&amp;amp;lt;TEntity&amp;amp;gt;();&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;public&amp;amp;nbsp;async&amp;amp;nbsp;Task&amp;amp;lt;IEnumerable&amp;amp;lt;TEntity&amp;amp;gt;&amp;amp;gt;&amp;amp;nbsp;GetAll()&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;{&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;return&amp;amp;nbsp;await&amp;amp;nbsp;EntityDbSet.ToListAsync();&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp; //&amp;amp;hellip;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;}&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I implement the specific repository interfaces&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;IMemberRepository&amp;lt;/span&amp;gt;&amp;amp;nbsp;and&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;IPhotoRepository&amp;lt;/span&amp;gt;&amp;amp;nbsp;in&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;MemberRepository&amp;lt;/span&amp;gt;&amp;amp;nbsp;and&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;PhotoRepository&amp;lt;/span&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;This is the example of&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;GetMemberByEmailAddress&amp;lt;/span&amp;gt;, method of&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;IMemberRepository&amp;lt;/span&amp;gt;&amp;amp;nbsp;interface mentioned earlier. Notice here we can use&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;MainDbContext&amp;lt;/span&amp;gt;&amp;amp;nbsp;and&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;EntityDbSet&amp;lt;/span&amp;gt;, protected properties of&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;Repository&amp;amp;lt;TEntity&amp;amp;gt;&amp;lt;/span&amp;gt;.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;div class="code"&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;public&amp;amp;nbsp;class&amp;amp;nbsp;MemberRepository&amp;amp;nbsp;:&amp;amp;nbsp;Repository&amp;amp;lt;Member&amp;amp;gt;,&amp;amp;nbsp;IMemberRepository&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;{&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;public&amp;amp;nbsp;MemberRepository(IGalleryContext&amp;amp;nbsp;dbContext)&amp;amp;nbsp;:&amp;amp;nbsp;base(dbContext)&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;{&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;public&amp;amp;nbsp;&amp;amp;nbsp;Task&amp;amp;lt;Member&amp;amp;gt;&amp;amp;nbsp;GetMemberByEmailAddress(string&amp;amp;nbsp;emailAddress)&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;{&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;//MainDbContext and EntityDbSet can be used here to accomplish this method.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class="row" style="padding: 0 90px; margin: 40px auto 40px auto;"&amp;gt;
&amp;lt;h2&amp;gt;WebAPI Project&amp;lt;/h2&amp;gt;
&amp;lt;h3&amp;gt;API Controllers&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;This is where HTTP requests will be received and proceeded to &amp;lt;em&amp;gt;Domain layer&amp;lt;/em&amp;gt; and HTTP responses will be sent back to the consumer.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I have three controllers in my project:&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;AuthController&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span class="code-var"&amp;gt;POST api/auth/login&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span class="code-var"&amp;gt;POST api/auth/register&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;amp;nbsp;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;MemberController&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span class="code-var"&amp;gt;GET api/member&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span class="code-var"&amp;gt;GET api/member/photos&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span class="code-var"&amp;gt;POST api/member/photos/upload&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;amp;nbsp;
&amp;lt;li&amp;gt;
&amp;lt;p&amp;gt;PhotoController (Not used yet in the application)&amp;lt;/p&amp;gt;
&amp;lt;ul&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span class="code-var"&amp;gt;GET api/photos/all&amp;lt;/span&amp;gt; (with paging)&amp;lt;/li&amp;gt;
&amp;lt;li&amp;gt;&amp;lt;span class="code-var"&amp;gt;GET api/photos/mostrecent/{numberOfPhotos}&amp;lt;/span&amp;gt;&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;/li&amp;gt;
&amp;lt;/ul&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;All controllers require an instance of an implementation of &amp;lt;span class="code-var"&amp;gt;IFrontManager&amp;lt;/span&amp;gt; to process all the requests to lower layers. It is achieved by Dependency Injection.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;div class="code"&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;private&amp;amp;nbsp;readonly&amp;amp;nbsp;IFrontManager&amp;amp;nbsp;_frontManager;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;public&amp;amp;nbsp;MemberController(IFrontManager&amp;amp;nbsp;frontManager)&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;{&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;_frontManager&amp;amp;nbsp;=&amp;amp;nbsp;frontManager;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;Attribute Filters&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;I also developed an action filter attribute,&amp;amp;nbsp;&amp;lt;span class="code-var"&amp;gt;ClientCacheControlFilterAttribute&amp;lt;/span&amp;gt;, which will allow me to cache the result of an action for a certain amount of seconds. This can be handy to avoid unnecessary round trips to data base when the consumer sends the same request. To use it, I just add it as an attribute to the specific action.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;div class="code"&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[Authorize]&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[Route("photos")]&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[ClientCacheControlFilter(ClientCacheControl.Public,&amp;amp;nbsp;120)]&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[HttpGet]&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;public&amp;amp;nbsp;async&amp;amp;nbsp;Task&amp;amp;lt;IActionResult&amp;amp;gt;&amp;amp;nbsp;GetMemberPhotos()&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;This will cache the result of &amp;lt;span class="code-var"&amp;gt;api/member/photos&amp;lt;/span&amp;gt; during 120 seconds.&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;Exceptions&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;In the different actions I developed, exceptions could be thrown from &amp;lt;em&amp;gt;Domain layer&amp;lt;/em&amp;gt;. Therefore they are handled in WebAPI actions to effectively communicate with the consumer. For example, if a new member is trying to register with an existing login name or email address, an exception of type &amp;lt;span class="code-var"&amp;gt;MemberAlreadyExists&amp;lt;/span&amp;gt; is thrown from &amp;lt;em&amp;gt;Domain layer&amp;lt;/em&amp;gt;. The exception is caught in the WebAPI action and a Bad request with the exception message is returned.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;div class="code"&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;[HttpPost("register")]&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;public&amp;amp;nbsp;async&amp;amp;nbsp;Task&amp;amp;lt;IActionResult&amp;amp;gt;&amp;amp;nbsp;Register(MemberToRegisterDto&amp;amp;nbsp;memberToRegisterDto)&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;{&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;try&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;{&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;var&amp;amp;nbsp;memberToLogin&amp;amp;nbsp;=&amp;amp;nbsp;await&amp;amp;nbsp;_frontManager.Register(memberToRegisterDto);&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;return&amp;amp;nbsp;CreatedAtRoute("GetMember",&amp;amp;nbsp;new&amp;amp;nbsp;{&amp;amp;nbsp;controller&amp;amp;nbsp;="Member",&amp;amp;nbsp;&amp;amp;nbsp;id&amp;amp;nbsp;=&amp;amp;nbsp;memberToRegisterDto.Id},&amp;amp;nbsp;memberToRegisterDto);&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;catch(MemberCreationException&amp;amp;nbsp;ex)&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;{&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;return&amp;amp;nbsp;BadRequest(ex);&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;catch(Exception&amp;amp;nbsp;ex)&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;{&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;return&amp;amp;nbsp;BadRequest(ex);&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;h3&amp;gt;Setting up dependency injection&amp;lt;/h3&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;ASP .Net Core provide us with a handy feature to configure dependency injection. WebAPI project include Startup.cs file that have basically instructions to be run at the start of the application. In &amp;lt;span class="code-var"&amp;gt;Startup.ConfigureServices&amp;lt;/span&amp;gt;, we can configure all our needed services (interfaces) by registering them with concrete types.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;div class="code"&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;public&amp;amp;nbsp;void&amp;amp;nbsp;ConfigureServices(IServiceCollection&amp;amp;nbsp;services)&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;{&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;services.AddDbContext&amp;amp;lt;GalleryContext&amp;amp;gt;options&amp;amp;nbsp;=&amp;amp;gt;&amp;amp;nbsp;options.UseSqlServer(&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp; &amp;amp;nbsp;Configuration.GetConnectionString("DefaultConnection")));&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;services.AddScoped&amp;amp;lt;IGalleryContext,&amp;amp;nbsp;GalleryContext&amp;amp;gt;();&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;services.AddScoped&amp;amp;lt;IRepository&amp;amp;lt;Photo&amp;amp;gt;,&amp;amp;nbsp;Repository&amp;amp;lt;Photo&amp;amp;gt;&amp;amp;gt;();&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;services.AddScoped&amp;amp;lt;IRepository&amp;amp;lt;Member&amp;amp;gt;,&amp;amp;nbsp;Repository&amp;amp;lt;Member&amp;amp;gt;&amp;amp;gt;();&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;services.AddScoped&amp;amp;lt;IPhotoRepository,&amp;amp;nbsp;PhotoRepository&amp;amp;gt;();&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;services.AddScoped&amp;amp;lt;IMemberRepository,&amp;amp;nbsp;MemberRepository&amp;amp;gt;();&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;services.AddScoped&amp;amp;lt;IFrontManager,&amp;amp;nbsp;FrontManager&amp;amp;gt;();&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;//...&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;}&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;p&amp;gt;&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;      </longdescription>
      <demo></demo>
      <github></github>
      <bigicon>/images/gallery.png</bigicon>
      <smallicon>/images/gallery64.png</smallicon>
    </article>
    <article id="0">
      <title>Article Manager</title>
      <technos>ASP.NET;MVC5;jQuery;DI;Ninject</technos>
      <shortdescription>
        A content manager that allows you to create, edit and delete articles that feature a title, a description and multiple pages.
      </shortdescription>
      <longdescription>
&amp;lt;div class="row" style="padding: 0 90px; margin: 15px auto 40px auto; background-color: #e9e9e9;"&amp;gt;
&amp;lt;div class="col-md-6" style="font-size: 20px;"&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;span style="color: #c0c0c0;"&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;em&amp;gt;&amp;lt;br /&amp;gt;&amp;lt;/em&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;span style="color: #000000;"&amp;gt;&amp;lt;em&amp;gt;This is a Conte&amp;lt;/em&amp;gt;&amp;lt;em&amp;gt;nt Manager application built on MVC5 and jQuery.&amp;lt;/em&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;&amp;lt;span style="color: #000000;"&amp;gt;&amp;lt;em&amp;gt;The content manager is presented with traditional functionalities including creating, editing and deleting articles. Each article has a title, a description and multiple pages that will represent its content.&amp;lt;/em&amp;gt;&amp;lt;/span&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class="col-md-6" style="text-align: center;"&amp;gt;&amp;lt;img style="width: 100%;" src="/images/article-manager.png" alt="" /&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div style="padding: 0 90px; margin: 40px auto 40px auto;"&amp;gt;
&amp;lt;p&amp;gt;This application allows the end user to create multiple articles (defined by their title and desription) and also create pages related to the article.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;the main page vertical menu contains all articles created.&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class="row" style="padding: 0 90px; margin: 40px auto 40px auto;"&amp;gt;
&amp;lt;div class="col-md-4" style="text-align: center;"&amp;gt;&amp;lt;img style="width: 70%;" src="/images/article-menu.png" alt="" /&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;div class="col-md-8"&amp;gt;
&amp;lt;p&amp;gt;The menu on the left is used to navigate between the existing articles. To add a new article, the end-user can click on the last + item and an empty article will be shown.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;To modifiy an article, simply click on the title of the article on the menu, the title and description can be modified and then save the modification by clicking on the green save button above.&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p style="text-align: center;"&amp;gt;&amp;lt;img style="width: 80%;" src="/images/article-buttons.png" alt="" /&amp;gt;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;To preview the article, click on the pink Preview button. This will take you to Article Reader application.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;note that the friendly url includes the article id&amp;amp;nbsp;&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The black Delete button will prompt a confirmation dialog to accept or cancel deletion of the article&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class="row" style="padding: 0 90px; margin: 40px auto 40px auto;"&amp;gt;
&amp;lt;div class="col-md-6"&amp;gt;
&amp;lt;p&amp;gt;Under the description, all the pages related to the article are presented in an editor. I used &amp;lt;a title="TinyMCE" href="https://www.tinymce.com/" target="_blank"&amp;gt;TinyMCE&amp;lt;/a&amp;gt;&amp;amp;nbsp;as a text editor. By clicking on the tabs, you can view each page, edit it and save it. A page can also be deleted by clicking on the black button and confirm.&amp;lt;/p&amp;gt;
&amp;lt;p&amp;gt;The + tab allows you to create new page inside the current article&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div class="col-md-6"&amp;gt;&amp;lt;img style="width: 100%;" src="/images/text-editor.png" alt="" /&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/div&amp;gt;
&amp;lt;div style="padding: 0 90px;"&amp;gt;
&amp;lt;p&amp;gt;Eeach button action support AJAX update, either with&amp;amp;nbsp;&amp;amp;nbsp;@Ajax.ActionLink or with jQuery&amp;amp;nbsp;$.ajax functionality,&amp;amp;nbsp;eleminating the need to reload the entire page.&amp;lt;/p&amp;gt;
&amp;lt;/div&amp;gt;</longdescription>
      <demo>http://demoarticlemanager.azurewebsites.net/</demo>
      <github>https://github.com/rafaagahbiche/demodata/tree/origin</github>
      <bigicon>/images/edit2.png</bigicon>
      <smallicon>/images/edit64.png</smallicon>
    </article>
    <article id="1">
      <title>Article Reader</title>
      <technos>ASP.NET;MVC5;jQuery;Bootstrap</technos>
      <shortdescription>
        After creating different articles with pages, this application displays the article title, description and related pages with a slider
      </shortdescription>
      <longdescription>
        &amp;lt;div class="row" style="padding: 0 90px; margin: 15px auto 40px auto;"&amp;gt;
        &amp;lt;div class="col-md-12" style="font-size: 20px;"&amp;gt;
        &amp;lt;p&amp;gt;After writing an article with multiple pages as content, Article reader is the application that allows the end user to display the article content.&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;The page is based on responsive client-side layout based on Bootstrap&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row" style="padding: 0 90px; margin: 40px auto 40px auto;"&amp;gt;
        &amp;lt;div class="col-md-12"&amp;gt;
        &amp;lt;p&amp;gt;Since the article is brought down to different pages, I created a slider as a custom jQuery plugin to navigate through the pages and never reload the page.&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;To navigate through the pages, the end user can use either the left/right arrows on the top of the pages or the left/right keyboard&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      </longdescription>
      <demo>http://demoarticlemanager.azurewebsites.net/article-viewer/1/editor</demo>
      <github>https://github.com/rafaagahbiche/demodata/tree/origin</github>
      <bigicon>/images/ebook.png</bigicon>
      <smallicon>/images/ebook64.png</smallicon>
    </article>
    <article id="2">
      <title>City Info</title>
      <technos>AngularJs;Bootstrap;DI</technos>
      <shortdescription>
        My first Angular application. Search for a city to display an image from Google Image, get weather forecast and upcoming events in the city.
      </shortdescription>
      <longdescription>
        &amp;lt;div class="row" style="padding: 0 90px; margin: 15px auto 40px auto;"&amp;gt;
        &amp;lt;div class="col-md-12" style="font-size: 20px;"&amp;gt;
        &amp;lt;p&amp;gt;City Info is my first AngularJs application I have built. The end user can enter a name of a city and it instantly displays informations about the selected city. I use free API to get informations like an image, weather forecast and upcoming events.&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;The page is based on responsive client-side layout based on Bootstrap&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row" style="padding: 0 90px; margin: 40px auto 40px auto;"&amp;gt;
        &amp;lt;div class="col-md-12"&amp;gt;
        &amp;lt;h2&amp;gt;Search&amp;lt;/h2&amp;gt;
        &amp;lt;p&amp;gt;I use the Google map autocomplete (google.maps.places.Autocomplete) using &amp;lt;span style="text-decoration: underline; color: #0000ff;"&amp;gt; &amp;lt;a href="https://gist.github.com/VictorBjelkholm/6687484" target="_blank"&amp;gt; &amp;lt;span style="color: #0000ff; text-decoration: underline;"&amp;gt;this trick&amp;lt;/span&amp;gt; &amp;lt;/a&amp;gt; &amp;lt;/span&amp;gt; as autocomplete functionality to get city name, and then get latitude and langitude properties to use them to get informations from other APIs.&amp;lt;/p&amp;gt;
        &amp;lt;p&amp;gt;Google map autocomplete object include images for the selected city, so I randomly display the first in the list.&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row" style="padding: 0 90px; margin: 40px auto 40px auto;"&amp;gt;
        &amp;lt;div class="col-md-12"&amp;gt;
        &amp;lt;h2&amp;gt;Weather forecast&amp;lt;/h2&amp;gt;
        &amp;lt;p&amp;gt;To get the weather forecast I call &amp;lt;span style="text-decoration: underline; color: #0000ff;"&amp;gt; &amp;lt;a href="http://api.openweathermap.org/data/2.5/" target="_blank"&amp;gt; &amp;lt;span style="color: #0000ff; text-decoration: underline;"&amp;gt;OpenWeatherMap API&amp;lt;/span&amp;gt; &amp;lt;/a&amp;gt; &amp;lt;/span&amp;gt; with latitude and langitude parameters. The response is a json object wrapping information like max and min temperature, weather description... which make it easy to parse.&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;div class="row" style="padding: 0 90px; margin: 40px auto 40px auto;"&amp;gt;
        &amp;lt;div class="col-md-12"&amp;gt;
        &amp;lt;h2&amp;gt;Upcoming events&amp;lt;/h2&amp;gt;
        &amp;lt;p&amp;gt;Current week events are pulled from &amp;lt;span style="text-decoration: underline; color: #0000ff;"&amp;gt; &amp;lt;a href="http://api.eventful.com/" target="_blank"&amp;gt; &amp;lt;span style="color: #0000ff; text-decoration: underline;"&amp;gt;Eventful API&amp;lt;/span&amp;gt; &amp;lt;/a&amp;gt; &amp;lt;/span&amp;gt; using latitude and langitude of the selected city. The response is a json object wrapping information about the event like title, description, image, location...&amp;lt;/p&amp;gt;
        &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;
      </longdescription>
      <demo>http://cityinfodemo.azurewebsites.net/cityinfo/</demo>
      <github>https://github.com/rafaagahbiche/cityinfo/</github>
      <bigicon>/images/earth128.png</bigicon>
      <smallicon>/images/earth64.png</smallicon>
    </article>
  </articles>
</data>